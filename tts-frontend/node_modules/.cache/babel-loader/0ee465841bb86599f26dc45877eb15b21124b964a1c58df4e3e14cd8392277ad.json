{"ast":null,"code":"import { mapState } from 'vuex';\nimport api from '@/services/api';\nexport default {\n  name: 'TTSGenerator',\n  data() {\n    return {\n      inputText: '',\n      selectedSpeaker: 'default',\n      audioUrl: '',\n      isGenerating: false,\n      error: ''\n    };\n  },\n  computed: {\n    ...mapState('tts', ['speakers'])\n  },\n  methods: {\n    async generateSpeech() {\n      if (!this.inputText.trim()) {\n        this.error = '请输入要转换的文字';\n        return;\n      }\n      this.error = '';\n      this.isGenerating = true;\n      try {\n        const response = await api.generateTTS({\n          text: this.inputText,\n          speaker: this.selectedSpeaker\n        });\n        if (response.success) {\n          // 获取完整的音频文件 URL\n          this.audioUrl = `${process.env.VUE_APP_API_URL}/${response.file_path}`;\n        } else {\n          throw new Error(response.message || '生成语音失败');\n        }\n      } catch (err) {\n        this.error = `生成语音失败: ${err.message}`;\n        console.error('生成语音失败:', err);\n      } finally {\n        this.isGenerating = false;\n      }\n    },\n    copyShareLink() {\n      if (!this.audioUrl) return;\n      navigator.clipboard.writeText(this.audioUrl).then(() => {\n        alert('分享链接已复制到剪贴板');\n      }).catch(err => {\n        console.error('复制链接失败:', err);\n        alert('复制链接失败，请手动复制');\n      });\n    }\n  },\n  async fetchSpeakers() {\n    try {\n      const response = await this.$api.getSpeakers();\n      if (response.data.success) {\n        this.speakers = response.data.speakers;\n      } else {\n        console.error('获取说话人失败:', response.data.message);\n      }\n    } catch (error) {\n      console.error('获取说话人失败:', error);\n    }\n  },\n  async mounted() {\n    await this.fetchSpeakers();\n  }\n};","map":{"version":3,"names":["mapState","api","name","data","inputText","selectedSpeaker","audioUrl","isGenerating","error","computed","methods","generateSpeech","trim","response","generateTTS","text","speaker","success","process","env","VUE_APP_API_URL","file_path","Error","message","err","console","copyShareLink","navigator","clipboard","writeText","then","alert","catch","fetchSpeakers","$api","getSpeakers","speakers","mounted"],"sources":["src/components/TTSGenerator.vue"],"sourcesContent":["<template>\n  <div class=\"tts-generator\">\n    <h2>文字转语音生成器</h2>\n\n    <div class=\"input-section\">\n      <textarea\n          v-model=\"inputText\"\n          placeholder=\"输入要转换的文字...\"\n          rows=\"5\"\n          class=\"text-input\"\n      ></textarea>\n\n      <div class=\"controls\">\n        <div class=\"speaker-select\" v-if=\"speakers.length > 0\">\n          <label>说话人:</label>\n          <select v-model=\"selectedSpeaker\">\n            <option v-for=\"speaker in speakers\" :key=\"speaker\" :value=\"speaker\">\n              {{ speaker }}\n            </option>\n          </select>\n        </div>\n\n        <button\n            @click=\"generateSpeech\"\n            :disabled=\"isGenerating\"\n            class=\"generate-btn\"\n        >\n          <span v-if=\"isGenerating\">生成中...</span>\n          <span v-else>生成语音</span>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"audio-section\" v-if=\"audioUrl\">\n      <audio :src=\"audioUrl\" controls class=\"audio-player\"></audio>\n      <div class=\"audio-actions\">\n        <a :href=\"audioUrl\" download=\"generated_speech.wav\" class=\"download-btn\">\n          下载音频\n        </a>\n        <button @click=\"copyShareLink\" class=\"share-btn\">\n          复制分享链接\n        </button>\n      </div>\n    </div>\n\n    <div v-if=\"error\" class=\"error-message\">\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport api from '@/services/api';\n\nexport default {\n  name: 'TTSGenerator',\n  data() {\n    return {\n      inputText: '',\n      selectedSpeaker: 'default',\n      audioUrl: '',\n      isGenerating: false,\n      error: ''\n    };\n  },\n  computed: {\n    ...mapState('tts', ['speakers'])\n  },\n  methods: {\n    async generateSpeech() {\n      if (!this.inputText.trim()) {\n        this.error = '请输入要转换的文字';\n        return;\n      }\n\n      this.error = '';\n      this.isGenerating = true;\n\n      try {\n        const response = await api.generateTTS({\n          text: this.inputText,\n          speaker: this.selectedSpeaker\n        });\n\n        if (response.success) {\n          // 获取完整的音频文件 URL\n          this.audioUrl = `${process.env.VUE_APP_API_URL}/${response.file_path}`;\n        } else {\n          throw new Error(response.message || '生成语音失败');\n        }\n      } catch (err) {\n        this.error = `生成语音失败: ${err.message}`;\n        console.error('生成语音失败:', err);\n      } finally {\n        this.isGenerating = false;\n      }\n    },\n    copyShareLink() {\n      if (!this.audioUrl) return;\n\n      navigator.clipboard.writeText(this.audioUrl)\n          .then(() => {\n            alert('分享链接已复制到剪贴板');\n          })\n          .catch(err => {\n            console.error('复制链接失败:', err);\n            alert('复制链接失败，请手动复制');\n          });\n    }\n  },\n  async fetchSpeakers() {\n    try {\n      const response = await this.$api.getSpeakers()\n      if (response.data.success) {\n        this.speakers = response.data.speakers\n      } else {\n        console.error('获取说话人失败:', response.data.message)\n      }\n    } catch (error) {\n      console.error('获取说话人失败:', error)\n    }\n  },\n  async mounted() {\n    await this.fetchSpeakers()\n  },\n};\n</script>\n\n<style scoped>\n.tts-generator {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 30px;\n  background-color: #ffffff;\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\nh2 {\n  text-align: center;\n  color: #2c3e50;\n  margin-bottom: 25px;\n  font-size: 28px;\n}\n\n.input-section {\n  margin-bottom: 25px;\n}\n\n.text-input {\n  width: 100%;\n  padding: 15px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 16px;\n  line-height: 1.5;\n  resize: vertical;\n  transition: border-color 0.3s;\n}\n\n.text-input:focus {\n  border-color: #3498db;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n}\n\n.controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 15px;\n}\n\n.speaker-select {\n  display: flex;\n  align-items: center;\n}\n\n.speaker-select label {\n  margin-right: 10px;\n  color: #555;\n  font-weight: 500;\n}\n\n.speaker-select select {\n  padding: 10px 15px;\n  border: 1px solid #e0e0e0;\n  border-radius: 6px;\n  background-color: #f9f9f9;\n  font-size: 16px;\n}\n\n.generate-btn {\n  background-color: #3498db;\n  color: white;\n  border: none;\n  padding: 12px 25px;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.generate-btn:hover:not(:disabled) {\n  background-color: #2980b9;\n}\n\n.generate-btn:disabled {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.audio-section {\n  margin-top: 25px;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n}\n\n.audio-player {\n  width: 100%;\n  margin-bottom: 15px;\n}\n\n.audio-actions {\n  display: flex;\n  gap: 15px;\n}\n\n.download-btn, .share-btn {\n  flex: 1;\n  text-align: center;\n  padding: 12px;\n  border-radius: 6px;\n  font-weight: 500;\n  text-decoration: none;\n  transition: all 0.3s;\n}\n\n.download-btn {\n  background-color: #2ecc71;\n  color: white;\n}\n\n.download-btn:hover {\n  background-color: #27ae60;\n}\n\n.share-btn {\n  background-color: #9b59b6;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.share-btn:hover {\n  background-color: #8e44ad;\n}\n\n.error-message {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #ffebee;\n  color: #c62828;\n  border-radius: 8px;\n  text-align: center;\n}\n</style>"],"mappings":"AAoDA,SAAAA,QAAA;AACA,OAAAC,GAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,eAAA;MACAC,QAAA;MACAC,YAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAT,QAAA;EACA;EACAU,OAAA;IACA,MAAAC,eAAA;MACA,UAAAP,SAAA,CAAAQ,IAAA;QACA,KAAAJ,KAAA;QACA;MACA;MAEA,KAAAA,KAAA;MACA,KAAAD,YAAA;MAEA;QACA,MAAAM,QAAA,SAAAZ,GAAA,CAAAa,WAAA;UACAC,IAAA,OAAAX,SAAA;UACAY,OAAA,OAAAX;QACA;QAEA,IAAAQ,QAAA,CAAAI,OAAA;UACA;UACA,KAAAX,QAAA,MAAAY,OAAA,CAAAC,GAAA,CAAAC,eAAA,IAAAP,QAAA,CAAAQ,SAAA;QACA;UACA,UAAAC,KAAA,CAAAT,QAAA,CAAAU,OAAA;QACA;MACA,SAAAC,GAAA;QACA,KAAAhB,KAAA,cAAAgB,GAAA,CAAAD,OAAA;QACAE,OAAA,CAAAjB,KAAA,YAAAgB,GAAA;MACA;QACA,KAAAjB,YAAA;MACA;IACA;IACAmB,cAAA;MACA,UAAApB,QAAA;MAEAqB,SAAA,CAAAC,SAAA,CAAAC,SAAA,MAAAvB,QAAA,EACAwB,IAAA;QACAC,KAAA;MACA,GACAC,KAAA,CAAAR,GAAA;QACAC,OAAA,CAAAjB,KAAA,YAAAgB,GAAA;QACAO,KAAA;MACA;IACA;EACA;EACA,MAAAE,cAAA;IACA;MACA,MAAApB,QAAA,cAAAqB,IAAA,CAAAC,WAAA;MACA,IAAAtB,QAAA,CAAAV,IAAA,CAAAc,OAAA;QACA,KAAAmB,QAAA,GAAAvB,QAAA,CAAAV,IAAA,CAAAiC,QAAA;MACA;QACAX,OAAA,CAAAjB,KAAA,aAAAK,QAAA,CAAAV,IAAA,CAAAoB,OAAA;MACA;IACA,SAAAf,KAAA;MACAiB,OAAA,CAAAjB,KAAA,aAAAA,KAAA;IACA;EACA;EACA,MAAA6B,QAAA;IACA,WAAAJ,aAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}