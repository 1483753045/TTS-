{"ast":null,"code":"// store/modules/tts.js\nimport api from '@/services/api';\nexport default {\n  namespaced: true,\n  state: {\n    speakers: [],\n    models: [],\n    isLoading: false,\n    error: null\n  },\n  mutations: {\n    SET_SPEAKERS(state, speakers) {\n      state.speakers = speakers;\n    },\n    SET_LOADING(state, isLoading) {\n      state.isLoading = isLoading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    }\n  },\n  actions: {\n    async fetchSpeakers({\n      commit\n    }) {\n      try {\n        commit('SET_LOADING', true);\n        const response = await api.getSpeakers();\n        if (response.data.success) {\n          commit('SET_SPEAKERS', response.data.speakers);\n        } else {\n          throw new Error(response.data.message || '获取说话人失败');\n        }\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        console.error('获取说话人失败:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    }\n  },\n  getters: {\n    speakers: state => state.speakers,\n    isLoading: state => state.isLoading,\n    error: state => state.error\n  }\n};","map":{"version":3,"names":["api","namespaced","state","speakers","models","isLoading","error","mutations","SET_SPEAKERS","SET_LOADING","SET_ERROR","actions","fetchSpeakers","commit","response","getSpeakers","data","success","Error","message","console","getters"],"sources":["/home/wxa/tts-system/tts-frontend/src/store/modules/tts.js"],"sourcesContent":["// store/modules/tts.js\nimport api from '@/services/api'\n\nexport default {\n    namespaced: true,\n    state: {\n        speakers: [],\n        models: [],\n        isLoading: false,\n        error: null\n    },\n    mutations: {\n        SET_SPEAKERS(state, speakers) {\n            state.speakers = speakers\n        },\n        SET_LOADING(state, isLoading) {\n            state.isLoading = isLoading\n        },\n        SET_ERROR(state, error) {\n            state.error = error\n        }\n    },\n    actions: {\n        async fetchSpeakers({ commit }) {\n            try {\n                commit('SET_LOADING', true)\n                const response = await api.getSpeakers()\n                if (response.data.success) {\n                    commit('SET_SPEAKERS', response.data.speakers)\n                } else {\n                    throw new Error(response.data.message || '获取说话人失败')\n                }\n            } catch (error) {\n                commit('SET_ERROR', error.message)\n                console.error('获取说话人失败:', error)\n            } finally {\n                commit('SET_LOADING', false)\n            }\n        }\n    },\n    getters: {\n        speakers: state => state.speakers,\n        isLoading: state => state.isLoading,\n        error: state => state.error\n    }\n}"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,gBAAgB;AAEhC,eAAe;EACXC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACHC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACX,CAAC;EACDC,SAAS,EAAE;IACPC,YAAYA,CAACN,KAAK,EAAEC,QAAQ,EAAE;MAC1BD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC7B,CAAC;IACDM,WAAWA,CAACP,KAAK,EAAEG,SAAS,EAAE;MAC1BH,KAAK,CAACG,SAAS,GAAGA,SAAS;IAC/B,CAAC;IACDK,SAASA,CAACR,KAAK,EAAEI,KAAK,EAAE;MACpBJ,KAAK,CAACI,KAAK,GAAGA,KAAK;IACvB;EACJ,CAAC;EACDK,OAAO,EAAE;IACL,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC5B,IAAI;QACAA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;QAC3B,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,WAAW,CAAC,CAAC;QACxC,IAAID,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;UACvBJ,MAAM,CAAC,cAAc,EAAEC,QAAQ,CAACE,IAAI,CAACb,QAAQ,CAAC;QAClD,CAAC,MAAM;UACH,MAAM,IAAIe,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,SAAS,CAAC;QACvD;MACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;QACZO,MAAM,CAAC,WAAW,EAAEP,KAAK,CAACa,OAAO,CAAC;QAClCC,OAAO,CAACd,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MACpC,CAAC,SAAS;QACNO,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;MAChC;IACJ;EACJ,CAAC;EACDQ,OAAO,EAAE;IACLlB,QAAQ,EAAED,KAAK,IAAIA,KAAK,CAACC,QAAQ;IACjCE,SAAS,EAAEH,KAAK,IAAIA,KAAK,CAACG,SAAS;IACnCC,KAAK,EAAEJ,KAAK,IAAIA,KAAK,CAACI;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}