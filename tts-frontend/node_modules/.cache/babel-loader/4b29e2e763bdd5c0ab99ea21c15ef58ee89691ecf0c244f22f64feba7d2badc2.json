{"ast":null,"code":"// store/modules/tts.js\nimport api from '@/services/api';\nexport default {\n  namespaced: true,\n  state: {\n    speakers: [],\n    models: [],\n    isLoading: false,\n    error: null\n  },\n  mutations: {\n    SET_SPEAKERS(state, speakers) {\n      // 关键：如果传入的 speakers 是 null/undefined，默认设为空数组\n      state.speakers = Array.isArray(speakers) ? speakers : [];\n    },\n    SET_LOADING(state, isLoading) {\n      state.isLoading = isLoading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    }\n  },\n  actions: {\n    async fetchSpeakers() {\n      try {\n        const response = await this.$api.getSpeakers();\n        if (response.data && response.data.success) {\n          // 确保speakers是数组\n          const speakers = response.data.speakers;\n          if (Array.isArray(speakers)) {\n            this.speakers = speakers;\n          } else {\n            // 如果不是数组，尝试转换或使用默认值\n            console.warn('API返回的speakers不是数组，尝试转换:', speakers);\n            this.speakers = speakers ? [speakers] : ['default'];\n          }\n        } else {\n          throw new Error(response.data?.message || 'API响应格式错误');\n        }\n      } catch (error) {\n        console.error('获取说话人失败:', error);\n        // 使用默认说话人列表\n        this.speakers = ['default'];\n        this.error = `获取说话人失败: ${error.message}`;\n      }\n    }\n  },\n  getters: {\n    speakers: state => state.speakers,\n    isLoading: state => state.isLoading,\n    error: state => state.error\n  }\n};","map":{"version":3,"names":["api","namespaced","state","speakers","models","isLoading","error","mutations","SET_SPEAKERS","Array","isArray","SET_LOADING","SET_ERROR","actions","fetchSpeakers","response","$api","getSpeakers","data","success","console","warn","Error","message","getters"],"sources":["/home/wxa/tts-system/tts-frontend/src/store/modules/tts.js"],"sourcesContent":["// store/modules/tts.js\nimport api from '@/services/api'\n\nexport default {\n    namespaced: true,\n    state: {\n        speakers: [],\n        models: [],\n        isLoading: false,\n        error: null\n    },\n    mutations: {\n        SET_SPEAKERS(state, speakers) {\n            // 关键：如果传入的 speakers 是 null/undefined，默认设为空数组\n            state.speakers = Array.isArray(speakers) ? speakers : [];\n        },\n        SET_LOADING(state, isLoading) {\n            state.isLoading = isLoading;\n        },\n        SET_ERROR(state, error) {\n            state.error = error;\n        }\n    },\n    actions: {\n        async fetchSpeakers() {\n            try {\n                const response = await this.$api.getSpeakers();\n\n                if (response.data && response.data.success) {\n                    // 确保speakers是数组\n                    const speakers = response.data.speakers;\n\n                    if (Array.isArray(speakers)) {\n                        this.speakers = speakers;\n                    } else {\n                        // 如果不是数组，尝试转换或使用默认值\n                        console.warn('API返回的speakers不是数组，尝试转换:', speakers);\n                        this.speakers = speakers ? [speakers] : ['default'];\n                    }\n                } else {\n                    throw new Error(response.data?.message || 'API响应格式错误');\n                }\n            } catch (error) {\n                console.error('获取说话人失败:', error);\n                // 使用默认说话人列表\n                this.speakers = ['default'];\n                this.error = `获取说话人失败: ${error.message}`;\n            }\n        }\n    },\n    getters: {\n        speakers: state => state.speakers,\n        isLoading: state => state.isLoading,\n        error: state => state.error\n    }\n}"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,gBAAgB;AAEhC,eAAe;EACXC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACHC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACX,CAAC;EACDC,SAAS,EAAE;IACPC,YAAYA,CAACN,KAAK,EAAEC,QAAQ,EAAE;MAC1B;MACAD,KAAK,CAACC,QAAQ,GAAGM,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE;IAC5D,CAAC;IACDQ,WAAWA,CAACT,KAAK,EAAEG,SAAS,EAAE;MAC1BH,KAAK,CAACG,SAAS,GAAGA,SAAS;IAC/B,CAAC;IACDO,SAASA,CAACV,KAAK,EAAEI,KAAK,EAAE;MACpBJ,KAAK,CAACI,KAAK,GAAGA,KAAK;IACvB;EACJ,CAAC;EACDO,OAAO,EAAE;IACL,MAAMC,aAAaA,CAAA,EAAG;MAClB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC;QAE9C,IAAIF,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;UACxC;UACA,MAAMhB,QAAQ,GAAGY,QAAQ,CAACG,IAAI,CAACf,QAAQ;UAEvC,IAAIM,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,EAAE;YACzB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;UAC5B,CAAC,MAAM;YACH;YACAiB,OAAO,CAACC,IAAI,CAAC,0BAA0B,EAAElB,QAAQ,CAAC;YAClD,IAAI,CAACA,QAAQ,GAAGA,QAAQ,GAAG,CAACA,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;UACvD;QACJ,CAAC,MAAM;UACH,MAAM,IAAImB,KAAK,CAACP,QAAQ,CAACG,IAAI,EAAEK,OAAO,IAAI,WAAW,CAAC;QAC1D;MACJ,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACZc,OAAO,CAACd,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;QAChC;QACA,IAAI,CAACH,QAAQ,GAAG,CAAC,SAAS,CAAC;QAC3B,IAAI,CAACG,KAAK,GAAG,YAAYA,KAAK,CAACiB,OAAO,EAAE;MAC5C;IACJ;EACJ,CAAC;EACDC,OAAO,EAAE;IACLrB,QAAQ,EAAED,KAAK,IAAIA,KAAK,CAACC,QAAQ;IACjCE,SAAS,EAAEH,KAAK,IAAIA,KAAK,CAACG,SAAS;IACnCC,KAAK,EAAEJ,KAAK,IAAIA,KAAK,CAACI;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}