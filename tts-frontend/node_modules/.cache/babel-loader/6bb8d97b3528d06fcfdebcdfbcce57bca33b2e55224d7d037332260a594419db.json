{"ast":null,"code":"import api from '@/services/api';\nexport default {\n  name: 'VoiceClone',\n  data() {\n    return {\n      inputText: '',\n      sampleFile: null,\n      clonedAudioUrl: '',\n      isCloning: false,\n      error: ''\n    };\n  },\n  methods: {\n    triggerFileUpload() {\n      this.$refs.fileInput.click();\n    },\n    handleFileUpload(event) {\n      this.sampleFile = event.target.files[0];\n    },\n    async cloneVoice() {\n      if (!this.inputText.trim()) {\n        this.error = '请输入要克隆的文字';\n        return;\n      }\n      if (!this.sampleFile) {\n        this.error = '请先上传语音样本';\n        return;\n      }\n      this.error = '';\n      this.isCloning = true;\n      try {\n        // 上传语音样本\n        const uploadResponse = await api.uploadSample(this.sampleFile);\n        if (!uploadResponse.success) {\n          throw new Error(uploadResponse.message || '样本上传失败');\n        }\n\n        // 克隆语音\n        const cloneResponse = await api.cloneVoice({\n          text: this.inputText,\n          speaker_wav: uploadResponse.file_path\n        });\n        if (cloneResponse.success) {\n          // 获取克隆的音频文件 URL\n          this.clonedAudioUrl = `${process.env.VUE_APP_API_URL}/${cloneResponse.file_path}`;\n        } else {\n          throw new Error(cloneResponse.message || '语音克隆失败');\n        }\n      } catch (err) {\n        console.error('语音克隆失败:', error);\n        this.error = `语音克隆失败: ${error.message}`;\n      } finally {\n        this.isCloning = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","inputText","sampleFile","clonedAudioUrl","isCloning","error","methods","triggerFileUpload","$refs","fileInput","click","handleFileUpload","event","target","files","cloneVoice","trim","uploadResponse","uploadSample","success","Error","message","cloneResponse","text","speaker_wav","file_path","process","env","VUE_APP_API_URL","err","console"],"sources":["src/components/VoiceClone.vue"],"sourcesContent":["<template>\n  <div class=\"voice-clone\">\n    <h2>语音克隆</h2>\n\n    <div class=\"upload-section\">\n      <input type=\"file\" @change=\"handleFileUpload\" accept=\"audio/*\" ref=\"fileInput\">\n      <button @click=\"triggerFileUpload\" class=\"upload-btn\">选择语音样本</button>\n      <p v-if=\"sampleFile\">已选择: {{ sampleFile.name }}</p>\n    </div>\n\n    <div class=\"input-section\">\n      <textarea\n          v-model=\"inputText\"\n          placeholder=\"输入要克隆的文字...\"\n          rows=\"5\"\n          class=\"text-input\"\n      ></textarea>\n    </div>\n\n    <div class=\"controls\">\n      <button\n          @click=\"cloneVoice\"\n          :disabled=\"isCloning || !sampleFile\"\n          class=\"clone-btn\"\n      >\n        <span v-if=\"isCloning\">克隆中...</span>\n        <span v-else>克隆语音</span>\n      </button>\n    </div>\n\n    <div class=\"audio-section\" v-if=\"clonedAudioUrl\">\n      <audio :src=\"clonedAudioUrl\" controls class=\"audio-player\"></audio>\n      <div class=\"audio-actions\">\n        <a :href=\"clonedAudioUrl\" download=\"cloned_voice.wav\" class=\"download-btn\">\n          下载克隆音频\n        </a>\n      </div>\n    </div>\n\n    <div v-if=\"error\" class=\"error-message\">\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '@/services/api';\n\nexport default {\n  name: 'VoiceClone',\n  data() {\n    return {\n      inputText: '',\n      sampleFile: null,\n      clonedAudioUrl: '',\n      isCloning: false,\n      error: ''\n    };\n  },\n  methods: {\n    triggerFileUpload() {\n      this.$refs.fileInput.click();\n    },\n    handleFileUpload(event) {\n      this.sampleFile = event.target.files[0];\n    },\n    async cloneVoice() {\n      if (!this.inputText.trim()) {\n        this.error = '请输入要克隆的文字';\n        return;\n      }\n\n      if (!this.sampleFile) {\n        this.error = '请先上传语音样本';\n        return;\n      }\n\n      this.error = '';\n      this.isCloning = true;\n\n      try {\n        // 上传语音样本\n        const uploadResponse = await api.uploadSample(this.sampleFile);\n\n        if (!uploadResponse.success) {\n          throw new Error(uploadResponse.message || '样本上传失败');\n        }\n\n        // 克隆语音\n        const cloneResponse = await api.cloneVoice({\n          text: this.inputText,\n          speaker_wav: uploadResponse.file_path\n        });\n\n        if (cloneResponse.success) {\n          // 获取克隆的音频文件 URL\n          this.clonedAudioUrl = `${process.env.VUE_APP_API_URL}/${cloneResponse.file_path}`;\n        } else {\n          throw new Error(cloneResponse.message || '语音克隆失败');\n        }\n      } catch (err) {\n        console.error('语音克隆失败:', error);\n        this.error = `语音克隆失败: ${error.message}`;\n      } finally {\n        this.isCloning = false;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.voice-clone {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 30px;\n  background-color: #ffffff;\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\nh2 {\n  text-align: center;\n  color: #2c3e50;\n  margin-bottom: 25px;\n  font-size: 28px;\n}\n\n.upload-section {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\ninput[type=\"file\"] {\n  display: none;\n}\n\n.upload-btn {\n  background-color: #e67e22;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.upload-btn:hover {\n  background-color: #d35400;\n}\n\n.input-section {\n  margin-bottom: 20px;\n}\n\n.text-input {\n  width: 100%;\n  padding: 15px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 16px;\n  line-height: 1.5;\n  resize: vertical;\n}\n\n.controls {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.clone-btn {\n  background-color: #9b59b6;\n  color: white;\n  border: none;\n  padding: 12px 25px;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.clone-btn:hover:not(:disabled) {\n  background-color: #8e44ad;\n}\n\n.clone-btn:disabled {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.audio-section {\n  margin-top: 25px;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n}\n\n.audio-player {\n  width: 100%;\n  margin-bottom: 15px;\n}\n\n.audio-actions {\n  text-align: center;\n}\n\n.download-btn {\n  display: inline-block;\n  background-color: #2ecc71;\n  color: white;\n  padding: 12px 25px;\n  border-radius: 6px;\n  text-decoration: none;\n  transition: background-color 0.3s;\n}\n\n.download-btn:hover {\n  background-color: #27ae60;\n}\n\n.error-message {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #ffebee;\n  color: #c62828;\n  border-radius: 8px;\n  text-align: center;\n}\n</style>"],"mappings":"AA8CA,OAAAA,GAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,UAAA;MACAC,cAAA;MACAC,SAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,kBAAA;MACA,KAAAC,KAAA,CAAAC,SAAA,CAAAC,KAAA;IACA;IACAC,iBAAAC,KAAA;MACA,KAAAV,UAAA,GAAAU,KAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;IACA,MAAAC,WAAA;MACA,UAAAd,SAAA,CAAAe,IAAA;QACA,KAAAX,KAAA;QACA;MACA;MAEA,UAAAH,UAAA;QACA,KAAAG,KAAA;QACA;MACA;MAEA,KAAAA,KAAA;MACA,KAAAD,SAAA;MAEA;QACA;QACA,MAAAa,cAAA,SAAAnB,GAAA,CAAAoB,YAAA,MAAAhB,UAAA;QAEA,KAAAe,cAAA,CAAAE,OAAA;UACA,UAAAC,KAAA,CAAAH,cAAA,CAAAI,OAAA;QACA;;QAEA;QACA,MAAAC,aAAA,SAAAxB,GAAA,CAAAiB,UAAA;UACAQ,IAAA,OAAAtB,SAAA;UACAuB,WAAA,EAAAP,cAAA,CAAAQ;QACA;QAEA,IAAAH,aAAA,CAAAH,OAAA;UACA;UACA,KAAAhB,cAAA,MAAAuB,OAAA,CAAAC,GAAA,CAAAC,eAAA,IAAAN,aAAA,CAAAG,SAAA;QACA;UACA,UAAAL,KAAA,CAAAE,aAAA,CAAAD,OAAA;QACA;MACA,SAAAQ,GAAA;QACAC,OAAA,CAAAzB,KAAA,YAAAA,KAAA;QACA,KAAAA,KAAA,cAAAA,KAAA,CAAAgB,OAAA;MACA;QACA,KAAAjB,SAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}