{"ast":null,"code":"// store/modules/tts.js\nexport default {\n  namespaced: true,\n  state: {\n    speakers: [],\n    isLoading: false,\n    error: null\n  },\n  mutations: {\n    SET_SPEAKERS(state, speakers) {\n      state.speakers = speakers;\n    },\n    SET_LOADING(state, isLoading) {\n      state.isLoading = isLoading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    }\n  },\n  actions: {\n    async fetchSpeakers({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      commit('SET_ERROR', null);\n      try {\n        const response = await api.getSpeakers();\n        if (response.data.success) {\n          commit('SET_SPEAKERS', response.data.speakers);\n        } else {\n          commit('SET_ERROR', response.data.message || '获取说话人失败');\n        }\n      } catch (error) {\n        commit('SET_ERROR', error.message || '获取说话人失败');\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","speakers","isLoading","error","mutations","SET_SPEAKERS","SET_LOADING","SET_ERROR","actions","fetchSpeakers","commit","response","api","getSpeakers","data","success","message"],"sources":["/home/wxa/tts-system/tts-frontend/src/store/modules/tts.js"],"sourcesContent":["// store/modules/tts.js\nexport default {\n    namespaced: true,\n    state: {\n        speakers: [],\n        isLoading: false,\n        error: null\n    },\n    mutations: {\n        SET_SPEAKERS(state, speakers) {\n            state.speakers = speakers;\n        },\n        SET_LOADING(state, isLoading) {\n            state.isLoading = isLoading;\n        },\n        SET_ERROR(state, error) {\n            state.error = error;\n        }\n    },\n    actions: {\n        async fetchSpeakers({ commit }) {\n            commit('SET_LOADING', true);\n            commit('SET_ERROR', null);\n            try {\n                const response = await api.getSpeakers();\n                if (response.data.success) {\n                    commit('SET_SPEAKERS', response.data.speakers);\n                } else {\n                    commit('SET_ERROR', response.data.message || '获取说话人失败');\n                }\n            } catch (error) {\n                commit('SET_ERROR', error.message || '获取说话人失败');\n            } finally {\n                commit('SET_LOADING', false);\n            }\n        }\n    }\n};"],"mappings":"AAAA;AACA,eAAe;EACXA,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACHC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACX,CAAC;EACDC,SAAS,EAAE;IACPC,YAAYA,CAACL,KAAK,EAAEC,QAAQ,EAAE;MAC1BD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC7B,CAAC;IACDK,WAAWA,CAACN,KAAK,EAAEE,SAAS,EAAE;MAC1BF,KAAK,CAACE,SAAS,GAAGA,SAAS;IAC/B,CAAC;IACDK,SAASA,CAACP,KAAK,EAAEG,KAAK,EAAE;MACpBH,KAAK,CAACG,KAAK,GAAGA,KAAK;IACvB;EACJ,CAAC;EACDK,OAAO,EAAE;IACL,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC5BA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3BA,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;MACzB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACC,WAAW,CAAC,CAAC;QACxC,IAAIF,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;UACvBL,MAAM,CAAC,cAAc,EAAEC,QAAQ,CAACG,IAAI,CAACb,QAAQ,CAAC;QAClD,CAAC,MAAM;UACHS,MAAM,CAAC,WAAW,EAAEC,QAAQ,CAACG,IAAI,CAACE,OAAO,IAAI,SAAS,CAAC;QAC3D;MACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;QACZO,MAAM,CAAC,WAAW,EAAEP,KAAK,CAACa,OAAO,IAAI,SAAS,CAAC;MACnD,CAAC,SAAS;QACNN,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;MAChC;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}