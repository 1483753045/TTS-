{"ast":null,"code":"// @/services/api.js（删除重复定义，统一用axios实例）\nimport axios from 'axios';\n\n// 1. 创建axios实例（统一配置基础路径、超时等，便于维护）\nconst axiosInstance = axios.create({\n  baseURL: process.env.VUE_APP_API_URL || 'http://localhost:8000',\n  // 统一基础路径\n  timeout: 30000,\n  // 超时时间（语音生成可能耗时，设30秒）\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 2. 统一封装API方法（避免重复定义）\nexport default {\n  // TTS相关\n  generateTTS(data) {\n    return axiosInstance.post('/api/tts/generate', data); // 用实例调用，避免报错\n  },\n  getSpeakers() {\n    return axiosInstance.get('/api/tts/speakers');\n  },\n  getModels() {\n    return axiosInstance.get('/api/tts/models');\n  },\n  // 语音克隆相关\n  cloneVoice(data) {\n    return axiosInstance.post('/api/voice-clone/generate', data);\n  },\n  uploadSample(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return axiosInstance.post('/api/voice-clone/upload-sample', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      } // 覆盖默认Content-Type\n    });\n  }\n};","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","VUE_APP_API_URL","timeout","headers","generateTTS","data","post","getSpeakers","get","getModels","cloneVoice","uploadSample","file","formData","FormData","append"],"sources":["/home/wxa/tts-system/tts-frontend/src/services/api.js"],"sourcesContent":["// @/services/api.js（删除重复定义，统一用axios实例）\nimport axios from 'axios';\n\n// 1. 创建axios实例（统一配置基础路径、超时等，便于维护）\nconst axiosInstance = axios.create({\n    baseURL: process.env.VUE_APP_API_URL || 'http://localhost:8000', // 统一基础路径\n    timeout: 30000, // 超时时间（语音生成可能耗时，设30秒）\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// 2. 统一封装API方法（避免重复定义）\nexport default {\n    // TTS相关\n    generateTTS(data) {\n        return axiosInstance.post('/api/tts/generate', data); // 用实例调用，避免报错\n    },\n    getSpeakers() {\n        return axiosInstance.get('/api/tts/speakers');\n    },\n    getModels() {\n        return axiosInstance.get('/api/tts/models');\n    },\n\n    // 语音克隆相关\n    cloneVoice(data) {\n        return axiosInstance.post('/api/voice-clone/generate', data);\n    },\n    uploadSample(file) {\n        const formData = new FormData();\n        formData.append('file', file);\n        return axiosInstance.post('/api/voice-clone/upload-sample', formData, {\n            headers: { 'Content-Type': 'multipart/form-data' } // 覆盖默认Content-Type\n        });\n    }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe,IAAI,uBAAuB;EAAE;EACjEC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,eAAe;EACX;EACAC,WAAWA,CAACC,IAAI,EAAE;IACd,OAAOT,aAAa,CAACU,IAAI,CAAC,mBAAmB,EAAED,IAAI,CAAC,CAAC,CAAC;EAC1D,CAAC;EACDE,WAAWA,CAAA,EAAG;IACV,OAAOX,aAAa,CAACY,GAAG,CAAC,mBAAmB,CAAC;EACjD,CAAC;EACDC,SAASA,CAAA,EAAG;IACR,OAAOb,aAAa,CAACY,GAAG,CAAC,iBAAiB,CAAC;EAC/C,CAAC;EAED;EACAE,UAAUA,CAACL,IAAI,EAAE;IACb,OAAOT,aAAa,CAACU,IAAI,CAAC,2BAA2B,EAAED,IAAI,CAAC;EAChE,CAAC;EACDM,YAAYA,CAACC,IAAI,EAAE;IACf,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAOhB,aAAa,CAACU,IAAI,CAAC,gCAAgC,EAAEO,QAAQ,EAAE;MAClEV,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}