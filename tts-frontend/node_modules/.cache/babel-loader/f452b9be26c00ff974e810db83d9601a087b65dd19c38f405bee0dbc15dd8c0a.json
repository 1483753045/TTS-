{"ast":null,"code":"import api from '@/services/api';\nexport default {\n  name: 'VoiceClone',\n  data() {\n    return {\n      inputText: '',\n      sampleFile: null,\n      clonedAudioUrl: '',\n      isCloning: false,\n      error: ''\n    };\n  },\n  methods: {\n    triggerFileUpload() {\n      this.$refs.fileInput.click();\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 1. 校验文件类型（仅允许音频）\n      const audioTypes = ['audio/wav', 'audio/mp3', 'audio/m4a'];\n      if (!audioTypes.includes(file.type)) {\n        this.error = '仅支持上传 WAV/MP3/M4A 格式的音频文件';\n        this.sampleFile = null;\n        return;\n      }\n\n      // 2. 校验文件大小（限制10MB，可调整）\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      if (file.size > maxSize) {\n        this.error = `文件过大（${(file.size / 1024 / 1024).toFixed(1)}MB），请上传10MB以内的文件`;\n        this.sampleFile = null;\n        return;\n      }\n\n      // 3. 校验通过，保存文件\n      this.sampleFile = file;\n      this.error = '';\n    },\n    async cloneVoice() {\n      if (!this.inputText.trim()) {\n        this.error = '请输入要克隆的文字';\n        return;\n      }\n      if (!this.sampleFile) {\n        this.error = '请先上传语音样本';\n        return;\n      }\n      this.error = '';\n      this.isCloning = true;\n      this.clonedAudioUrl = ''; // 重置之前的音频URL\n\n      try {\n        // 上传语音样本\n        const uploadResponse = await api.uploadSample(this.sampleFile);\n\n        // 检查上传响应\n        if (!uploadResponse.data || !uploadResponse.data.success) {\n          throw new Error(uploadResponse.data?.message || '样本上传失败');\n        }\n\n        // 克隆语音\n        const cloneResponse = await api.cloneVoice({\n          text: this.inputText,\n          speaker_wav: uploadResponse.data.file_path\n        });\n\n        // 检查克隆响应\n        if (cloneResponse.data && cloneResponse.data.success) {\n          if (cloneResponse.data.file_path) {\n            // 处理成功克隆\n            this.clonedAudioUrl = `${process.env.VUE_APP_API_URL}/${cloneResponse.data.file_path}`;\n          } else {\n            throw new Error('API返回的file_path为空');\n          }\n        } else {\n          throw new Error(cloneResponse.data?.message || '语音克隆失败');\n        }\n      } catch (err) {\n        console.error('语音克隆失败:', err);\n        this.error = `语音克隆失败: ${err.message || '未知错误'}`;\n      } finally {\n        this.isCloning = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","inputText","sampleFile","clonedAudioUrl","isCloning","error","methods","triggerFileUpload","$refs","fileInput","click","handleFileUpload","event","file","target","files","audioTypes","includes","type","maxSize","size","toFixed","cloneVoice","trim","uploadResponse","uploadSample","success","Error","message","cloneResponse","text","speaker_wav","file_path","process","env","VUE_APP_API_URL","err","console"],"sources":["src/components/VoiceClone.vue"],"sourcesContent":["<template>\n  <div class=\"voice-clone\">\n    <h2>语音克隆</h2>\n\n    <div class=\"upload-section\">\n      <input type=\"file\" @change=\"handleFileUpload\" accept=\"audio/*\" ref=\"fileInput\">\n      <button @click=\"triggerFileUpload\" class=\"upload-btn\">选择语音样本</button>\n      <p v-if=\"sampleFile\">已选择: {{ sampleFile.name }}</p>\n    </div>\n\n    <div class=\"input-section\">\n      <textarea\n          v-model=\"inputText\"\n          placeholder=\"输入要克隆的文字...\"\n          rows=\"5\"\n          class=\"text-input\"\n      ></textarea>\n    </div>\n\n    <div class=\"controls\">\n      <button\n          @click=\"cloneVoice\"\n          :disabled=\"isCloning || !sampleFile\"\n          class=\"clone-btn\"\n      >\n        <span v-if=\"isCloning\">克隆中...</span>\n        <span v-else>克隆语音</span>\n      </button>\n    </div>\n\n    <div class=\"audio-section\" v-if=\"clonedAudioUrl\">\n      <audio :src=\"clonedAudioUrl\" controls class=\"audio-player\"></audio>\n      <div class=\"audio-actions\">\n        <a :href=\"clonedAudioUrl\" download=\"cloned_voice.wav\" class=\"download-btn\">\n          下载克隆音频\n        </a>\n      </div>\n    </div>\n\n    <div v-if=\"error\" class=\"error-message\">\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '@/services/api';\n\nexport default {\n  name: 'VoiceClone',\n  data() {\n    return {\n      inputText: '',\n      sampleFile: null,\n      clonedAudioUrl: '',\n      isCloning: false,\n      error: ''\n    };\n  },\n  methods: {\n    triggerFileUpload() {\n      this.$refs.fileInput.click();\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 1. 校验文件类型（仅允许音频）\n      const audioTypes = ['audio/wav', 'audio/mp3', 'audio/m4a'];\n      if (!audioTypes.includes(file.type)) {\n        this.error = '仅支持上传 WAV/MP3/M4A 格式的音频文件';\n        this.sampleFile = null;\n        return;\n      }\n\n      // 2. 校验文件大小（限制10MB，可调整）\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      if (file.size > maxSize) {\n        this.error = `文件过大（${(file.size/1024/1024).toFixed(1)}MB），请上传10MB以内的文件`;\n        this.sampleFile = null;\n        return;\n      }\n\n      // 3. 校验通过，保存文件\n      this.sampleFile = file;\n      this.error = '';\n    },\n    async cloneVoice() {\n      if (!this.inputText.trim()) {\n        this.error = '请输入要克隆的文字';\n        return;\n      }\n\n      if (!this.sampleFile) {\n        this.error = '请先上传语音样本';\n        return;\n      }\n\n      this.error = '';\n      this.isCloning = true;\n      this.clonedAudioUrl = ''; // 重置之前的音频URL\n\n      try {\n        // 上传语音样本\n        const uploadResponse = await api.uploadSample(this.sampleFile);\n\n        // 检查上传响应\n        if (!uploadResponse.data || !uploadResponse.data.success) {\n          throw new Error(uploadResponse.data?.message || '样本上传失败');\n        }\n\n        // 克隆语音\n        const cloneResponse = await api.cloneVoice({\n          text: this.inputText,\n          speaker_wav: uploadResponse.data.file_path\n        });\n\n        // 检查克隆响应\n        if (cloneResponse.data && cloneResponse.data.success) {\n          if (cloneResponse.data.file_path) {\n            // 处理成功克隆\n            this.clonedAudioUrl = `${process.env.VUE_APP_API_URL}/${cloneResponse.data.file_path}`;\n          } else {\n            throw new Error('API返回的file_path为空');\n          }\n        } else {\n          throw new Error(cloneResponse.data?.message || '语音克隆失败');\n        }\n      } catch (err) {\n        console.error('语音克隆失败:', err);\n        this.error = `语音克隆失败: ${err.message || '未知错误'}`;\n      } finally {\n        this.isCloning = false;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.voice-clone {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 30px;\n  background-color: #ffffff;\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\nh2 {\n  text-align: center;\n  color: #2c3e50;\n  margin-bottom: 25px;\n  font-size: 28px;\n}\n\n.upload-section {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\ninput[type=\"file\"] {\n  display: none;\n}\n\n.upload-btn {\n  background-color: #e67e22;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.upload-btn:hover {\n  background-color: #d35400;\n}\n\n.input-section {\n  margin-bottom: 20px;\n}\n\n.text-input {\n  width: 100%;\n  padding: 15px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 16px;\n  line-height: 1.5;\n  resize: vertical;\n  transition: border-color 0.3s;\n}\n\n.text-input:focus {\n  border-color: #3498db;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n}\n\n.controls {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.clone-btn {\n  background-color: #9b59b6;\n  color: white;\n  border: none;\n  padding: 12px 25px;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.clone-btn:hover:not(:disabled) {\n  background-color: #8e44ad;\n}\n\n.clone-btn:disabled {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.audio-section {\n  margin-top: 25px;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  animation: fadeIn 0.5s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.audio-player {\n  width: 100%;\n  margin-bottom: 15px;\n}\n\n.audio-actions {\n  text-align: center;\n}\n\n.download-btn {\n  display: inline-block;\n  background-color: #2ecc71;\n  color: white;\n  padding: 12px 25px;\n  border-radius: 6px;\n  text-decoration: none;\n  transition: background-color 0.3s;\n}\n\n.download-btn:hover {\n  background-color: #27ae60;\n}\n\n.error-message {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #ffebee;\n  color: #c62828;\n  border-radius: 8px;\n  text-align: center;\n}\n</style>"],"mappings":"AA8CA,OAAAA,GAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,UAAA;MACAC,cAAA;MACAC,SAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,kBAAA;MACA,KAAAC,KAAA,CAAAC,SAAA,CAAAC,KAAA;IACA;IACAC,iBAAAC,KAAA;MACA,MAAAC,IAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAF,IAAA;;MAEA;MACA,MAAAG,UAAA;MACA,KAAAA,UAAA,CAAAC,QAAA,CAAAJ,IAAA,CAAAK,IAAA;QACA,KAAAb,KAAA;QACA,KAAAH,UAAA;QACA;MACA;;MAEA;MACA,MAAAiB,OAAA;MACA,IAAAN,IAAA,CAAAO,IAAA,GAAAD,OAAA;QACA,KAAAd,KAAA,YAAAQ,IAAA,CAAAO,IAAA,gBAAAC,OAAA;QACA,KAAAnB,UAAA;QACA;MACA;;MAEA;MACA,KAAAA,UAAA,GAAAW,IAAA;MACA,KAAAR,KAAA;IACA;IACA,MAAAiB,WAAA;MACA,UAAArB,SAAA,CAAAsB,IAAA;QACA,KAAAlB,KAAA;QACA;MACA;MAEA,UAAAH,UAAA;QACA,KAAAG,KAAA;QACA;MACA;MAEA,KAAAA,KAAA;MACA,KAAAD,SAAA;MACA,KAAAD,cAAA;;MAEA;QACA;QACA,MAAAqB,cAAA,SAAA1B,GAAA,CAAA2B,YAAA,MAAAvB,UAAA;;QAEA;QACA,KAAAsB,cAAA,CAAAxB,IAAA,KAAAwB,cAAA,CAAAxB,IAAA,CAAA0B,OAAA;UACA,UAAAC,KAAA,CAAAH,cAAA,CAAAxB,IAAA,EAAA4B,OAAA;QACA;;QAEA;QACA,MAAAC,aAAA,SAAA/B,GAAA,CAAAwB,UAAA;UACAQ,IAAA,OAAA7B,SAAA;UACA8B,WAAA,EAAAP,cAAA,CAAAxB,IAAA,CAAAgC;QACA;;QAEA;QACA,IAAAH,aAAA,CAAA7B,IAAA,IAAA6B,aAAA,CAAA7B,IAAA,CAAA0B,OAAA;UACA,IAAAG,aAAA,CAAA7B,IAAA,CAAAgC,SAAA;YACA;YACA,KAAA7B,cAAA,MAAA8B,OAAA,CAAAC,GAAA,CAAAC,eAAA,IAAAN,aAAA,CAAA7B,IAAA,CAAAgC,SAAA;UACA;YACA,UAAAL,KAAA;UACA;QACA;UACA,UAAAA,KAAA,CAAAE,aAAA,CAAA7B,IAAA,EAAA4B,OAAA;QACA;MACA,SAAAQ,GAAA;QACAC,OAAA,CAAAhC,KAAA,YAAA+B,GAAA;QACA,KAAA/B,KAAA,cAAA+B,GAAA,CAAAR,OAAA;MACA;QACA,KAAAxB,SAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}